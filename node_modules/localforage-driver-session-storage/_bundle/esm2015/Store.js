const stores = {};
/** @internal */
export class Store {
    constructor(kp) {
        this.kp = kp;
    }
    static resolve(kp) {
        if (!stores[kp]) {
            stores[kp] = new Store(kp);
        }
        return stores[kp];
    }
    clear() {
        const keys = this.keys();
        for (let i = 0; i < keys.length; i++) {
            this.rm(keys[i]);
        }
    }
    drop() {
        this.clear();
        delete stores[this.kp];
    }
    get(key) {
        return sessionStorage.getItem(this.kp + key);
    }
    key(idx) {
        return this.keys()[idx];
    }
    keys() {
        const out = [];
        let key;
        for (let i = sessionStorage.length - 1; i >= 0; i--) {
            key = sessionStorage.key(i);
            if (key && key.indexOf(this.kp) === 0) {
                out.push(key.substr(this.kp.length));
            }
        }
        return out;
    }
    rm(key) {
        sessionStorage.removeItem(this.kp + key);
    }
    set(k, v) {
        sessionStorage.setItem(this.kp + k, v);
    }
}
//# sourceMappingURL=Store.js.map