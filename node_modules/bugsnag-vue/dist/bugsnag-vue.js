(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.bugsnag__vue = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var _this = this;

module.exports = function () {
  var Vue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.Vue;

  if (!Vue) throw new Error('cannot find Vue');
  return {
    init: function (client) {
      var prev = Vue.config.errorHandler;

      var handler = function (err, vm, info) {
        var handledState = { severity: 'error', unhandled: true, severityReason: { type: 'unhandledException' } };
        var report = new client.BugsnagReport(err.name, err.message, client.BugsnagReport.getStacktrace(err), handledState);

        report.updateMetaData('vue', {
          errorInfo: info,
          component: vm ? formatComponentName(vm, true) : undefined,
          props: vm ? vm.$options.propsData : undefined
        });

        client.notify(report);
        console.error(err);

        if (typeof prev === 'function') prev.call(_this, err, vm, info);
      };

      Vue.config.errorHandler = handler;
      return null;
    }
  };
};

// taken and reworked from Vue.js source
var formatComponentName = function (vm, includeFile) {
  if (vm.$root === vm) return '<Root>';
  var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
  var name = options.name || options._componentTag;
  var file = options.__file;
  if (!name && file) {
    var match = file.match(/([^/\\]+)\.vue$/);
    name = match && match[1];
  }

  return (name ? '<' + classify(name) + '>' : '<Anonymous>') + (file && includeFile !== false ? ' at ' + file : '');
};

// taken and reworked from Vue.js source
var classify = module.exports.classify = function (str) {
  return str.replace(/(?:^|[-_])(\w)/g, function (c) {
    return c.toUpperCase();
  }).replace(/[-_]/g, '');
};

},{}]},{},[1])(1)
});